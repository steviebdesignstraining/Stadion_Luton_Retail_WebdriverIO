name: Run Android E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Move fsevents to optionalDependencies (CI fix)
        working-directory: ./wdio-appium-project
        run: |
          sudo apt-get install jq -y
          jq 'if .dependencies["fsevents"] then
                .optionalDependencies["fsevents"] = .dependencies["fsevents"] |
                del(.dependencies["fsevents"])
              else . end' package.json > tmp.json
          mv tmp.json package.json

      - name: Install dependencies
        working-directory: ./wdio-appium-project
        run: npm install

      - name: Set up Android SDK and AVD
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-30" "system-images;android-30;default;armeabi-v7a"
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;default;armeabi-v7a" --device "Nexus 6"

      - name: Start ARM Emulator (cold boot)
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -accel off &
          adb wait-for-device
          echo "Waiting for emulator to fully boot..."
          booted="0"
          attempts=0
          while [[ "$booted" != "1" && $attempts -lt 10 ]]; do
            booted=$(adb shell getprop sys.boot_completed | tr -d '\r')
            sleep 15
            attempts=$((attempts+1))
          done
          if [[ "$booted" != "1" ]]; then
            echo "Emulator failed to boot. Exiting."
            exit 1
          fi

      - name: Run Appium E2E tests
        run: |
          wget https://github.com/steviebdesignstraining/Stadion_Luton_Retail_WebdriverIO/releases/download/v1.0.0/LutonRetail.apk -O ./wdio-appium-project/app.apk
          cd wdio-appium-project
          npx wdio run wdio.conf.js

      - name: Install Allure commandline
        run: npm install -g allure-commandline --save-dev

      - name: Generate Allure report
        working-directory: ./wdio-appium-project
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: wdio-appium-project/allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./wdio-appium-project/allure-report
          force_orphan: true
